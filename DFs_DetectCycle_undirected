#include <iostream>
#include<vector>
#include<queue>
#include<climits>
using namespace std;


//Cycle finding ina undirctred graph is very easy,
// just loop on a sinvgkle element from the begnnnig with avisisted flag
// onkly diffence is send a parent also here as if we detceted a paernt then 
// it is not anloop, as it is an unidrcted graph
// if it detcetes a visited flag and not a preant it is a cycle
bool depthFind(int index, vector<vector<int>>& adj, vector<bool>& visited, int parent)
{
    for (auto u:adj[index]) {
        if (!visited[u]) {
            visited[u] = true;
            if (depthFind(u, adj, visited, index)) {
                return true;
            }
        } else {
            if (u != parent) {
                return true;
            }
        }
    }
    return false;
}

bool DFS(vector<vector<int>> adj)
{
    vector<bool> visited(6,false);
    for (int i = 0; i < 6; i++) {
        if (!visited[i]) {
            visited[i] = true;
            if (depthFind( i, adj, visited, -1)) {
                return true;
            }           
        }
    }
    return false;
}
void addEdge(vector<vector<int>>& adj, int i, int j)
{
    adj[i].push_back(j);
    adj[j].push_back(i);
}

int main() 
{ 
	vector<vector<int>> adj(6);
	addEdge(adj,0,1); 
	addEdge(adj,1,2); 
	addEdge(adj,2,4); 
	addEdge(adj,4,5); 
	addEdge(adj,1,3);
	addEdge(adj,2,3);

	if(DFS(adj))
	    cout<<"Cycle found";
	else
	    cout<<"No cycle found";

	return 0; 
} 
